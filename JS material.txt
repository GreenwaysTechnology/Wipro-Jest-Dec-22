			   Jest
.....................................................................................
What is Jest?

  Jest is delightful javascript testing framework .
Jest is just javascript  testing tool only which is not dependant any js framework o or lib - like angular,react,vue,jquery....

Before start jest we need to have good knowledge js.

1.javascript functional programming features such as higher order functions
2.javascript async programming styles - like callbacks,Promises,async and await...
3.javascript objects - literal objects,constructors based...

Javascript :
 =>Programming language 
     ->Functional , object based language.
 =>ES - ecma script /es - es 1,3,4,5,6,7 | ,8,9,10
.....................................................................................
Where can i run js?

1.browsers
2.commandline - node.js

Setup:
1.node.js
2.vs code


project setup:
E:\session\wipro\jestjs>mkdir jsapps

E:\session\wipro\jestjs>cd jsapps

E:\session\wipro\jestjs\jsapps>mkdir src

E:\session\wipro\jestjs\jsapps>code .

create html file called index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JestTraining</title>
</head>
<body>
    <h1>Jest Apps</h1>
    <script src="src/index.js"></script>
</body>
</html>
....................................................................................

Language fundamentals:

There are two types of language based on data types

1.strongly typed/static typed
 int a
 float f
  type of variable is represented
  we can avoid type mismatch during compile time

2.weakly typed/dynamic typed
  var a 
    here no type is declared for a 
 now a can hold any type of value

js is dynamic typed.

JS is dynamic typed language, the data type is not declared,type of variable is understood during runtime.

variables are declared using "var,let,const,this" keywords

es 6 variables are declared using "let and const"

let | const variableName = value(literal)

types of literals

1.string
2.number
3.boolean
4.undefined
5.NaN
6.infinity
7.function
8.null
9.object

types
1.string
2.number - number,infinity,NaN
3.boolean
4.undefined
5.function
6.object - null, object




//variable declaration and values(literals) assigments

//strings : '',"",``
var firstName = 'Subramanian'
let lastName = 'Murugan'
console.log("Name " + firstName + lastName)
console.log("Name ", firstName, lastName)
console.log(`Name  ${firstName}  ${lastName}`)

//numbers
let salary = 1000
let totalSalary = salary * 10
console.log(`Salary ${salary} Total Salary ${totalSalary}`)

//booleans
let isValid = true
let isEnabled = false
console.log(`Valid ${isValid} Enabled ${isEnabled}`)

//undefined 
let qty;
console.log(`Qty ${qty}`)

//NaN - not a number - it is runtime numerical error code.
//NaN is bug when get NaN you have to fix it. 
//NaN you get when you do computation against undefined variables

let price = 100
let totalPrice = qty * price
console.log(`Qty ${qty} price ${price} TotalPrice ${totalPrice}`)

//infinity
let avgPrice = price / 0
console.log(`Avg  Price ${avgPrice}`)
.....................................................................................
....................................................................................
				Advanced booleans
...................................................................................

falsy values:

 In javascript every thing is true except the follwing values

1.boolean false
2.0
3.undefined
4.NaN
5."",''(empty string)
6.null

let myvar = ""
if (myvar) {
    console.log("valid")
} else {
    console.log("Invalid")
}

myvar = 0
if (myvar) {
    console.log("valid")
} else {
    console.log("Invalid")
}
myvar = undefined
if (myvar) {
    console.log("valid")
} else {
    console.log("Invalid")
}
myvar = NaN
if (myvar) {
    console.log("valid")
} else {
    console.log("Invalid")
}
myvar = null
if (myvar) {
    console.log("valid")
} else {
    console.log("Invalid")
}
myvar = false
if (myvar) {
    console.log("valid")
} else {
    console.log("Invalid")
}

myvar = 100
if (myvar) {
    console.log("valid")
} else {
    console.log("Invalid")
}
.....................................................................................
				Operators

1.equal operators
  ==  -  only test values
  === -  test value + type -Recommended
//operators

let a = 100
let b = 100
if (a == b) {
    console.log("equal")
} else {
    console.log("not equal")
}

let x = "100" //string
let y = 100 //number
if (x == y) {
    console.log("equal")
} else {
    console.log("not equal")
}
//this is right comparsion
if (x === y) {
    console.log("equal")
} else {
    console.log("not equal")
}
...................................................................................
			  Tenary operator
...................................................................................

=> To replace if..else
=> To make code more simple and concise
//Tenary operator

let isEnabled = true

if (isEnabled) {
    console.log('Enabled')
} else {
    console.log('disabled')
}
//
isEnabled ? console.log('Enabled') : console.log('disabled')

let start = 0;
start ? console.log('start') : console.log('dont start')
...................................................................................

//let vs const 
let a = 10
console.log(`A ${a}`)
a = 900
console.log(`A ${a}`)

const b =100
console.log(`B ${b}`)
b=900
console.log(`B ${b}`)
.....................................................................................
.....................................................................................
			 functions and function literals
.....................................................................................

function is unit of representation which holds the js code.

=>How to declare functions
=>How to pass args and parameters
=>How to return values from the functions
=>How to declare functions with literal syntax
=>ES 6 functions called -Arrow
=>functional programming principles and implementations
....................................................................................

=>How to declare functions

//function declaration
function sayHello() {
    //body of the function 
    console.log('sayHello')
}
//invoke function 
sayHello()

=>How to pass args and parameters
//function args and parameters

function sayHello(name) {
    console.log(`Hello ${name}`)
}
sayHello('Subramanian')
sayHello()

//default args 
function multiply(a = 0, b = 0) {
    console.log(`a ${a} b ${b}`)
    let c = a * b
    console.log(`The Result is ${c}`)
}
multiply(10, 10)
multiply()
....
=>How to return values from the functions

function getName() {
    return 'Subramanian'
}
console.log(getName())
function add(a = 0, b = 0) {
    return a + b
}
console.log(add())
console.log(add(10,10))
....................................................................................
				Higher order functions
....................................................................................
				Function as Literal(value)
....................................................................................

Like numbers,strings,booleans, functions also literals(values)

let a =10 //10 value(literal)
let b="hello" //"hello" (literal)
let c=true //(literal)

since function is literal can be assigned to a variable, can be passed as parameter to another function, can be returned from another function.

functions are assigned to variables.
That variable can be used to invoke that function.


//hello is just variable,holding function literal as value 
//hello can be used to invoke that function 
//if function has no name , anonmous function 

//function declaration

//regular function 
function sayHello() {
    return 'Hello'
}
//function invcation 
console.log(sayHello())

//assign the function inside variable 
let hello = sayHello;
//we can invoke function using hello variable 
console.log(hello())
//anonmous functions :function without name 
let hai = function () {
    console.log('Hai')
}
hai()
//args and parameters in the anonmous function 
let add = function (a = 0, b = 0) {
    return a + b
}
console.log(add(10,10))
console.log(add())
....................................................................................

ES 6 arrow functions:
......................

To eleminate es 5 anonmous functions.
//arrow functions 

//es 5 function 
let sayHello = function () {
    console.log('Hello')
}
//es 6 arrow function 
let sayHai = () => {
    console.log('hai')
}
sayHai()
//code refactoring : 
//if function has only one line of code - remove {}

let sayGreet = () => console.log('greet')

//args and arrow 
let add = (a = 0, b = 0) => {
    let c = a + b
    return c
}
console.log(`The add function ${add(10, 10)}`)
//if fun has only return statement, we can remove {} and return statement
add = (a = 0, b = 0) => a + b

console.log(`The add function ${add(10, 10)}`)

//if fun takes single arg,without default value , return the same,
//we can remove () and {}
let stockValue = value => value
console.log(stockValue(10))
...................................................................................
			Function as parameters - higher order function
................................................................................
How to pass function as param?

es 5 style and es 6 style - arrow

//higher order function  - function as param

function add(a, b) {
    return a + b
}
let x = 10
let y = 90
console.log(add(x, y))
console.log(add(12, 12))

function sayGreet(greet) {
    greet()
}
let hai = function () {
    console.log('hai')
}
sayGreet(hai)

sayGreet(function () {
    console.log('Hai inline')
})
.......

hof with args

function sayGreet(greet) {
    greet('Subramanian')
}
let hai = function (name = '') {
    console.log(`Hai ${name}`)
}
sayGreet(hai)
sayGreet(function (name = '') {
    console.log(`Hai ${name}`)
})

...
arrow and hof

let sayGreet = greet => greet('Subramanian')

sayGreet(function (name = '') {
    console.log(`Hai ${name} `)
})
sayGreet((name = '') => console.log(`Hai ${name}`))
...................................................................................

Complex higher order functions:
//

const login = (userName, password, resolve, reject) => {
    if (userName === 'admin' && password === 'admin') {
        resolve('Login success')
    } else {
        reject('Login failed')
    }
}
login('admin', 'admin', status => console.log(status), err => console.log(err))

login('foo', 'bar', status => console.log(status), err => console.log(err))

const test = (title, callback) => {
    callback(title)
}

function expect(res) {
    console.log(res)
}

test('adds 1 + 2 to equal to 3', () => {
    expect('test passd')
})
....................................................................................
How to return function from another function?
//return function from another function .
function counter() {
    //inner function 
    return function () {
        return 10
    }
}
const func = counter()
console.log(func())

let inc = () => {
    //inner function 
    return () => {
        return 10
    }
}

const func1 = counter()
console.log(func1())

inc = () => () => 10 
console.log(inc()())
.....................................................................................
				Objects
.....................................................................................

How to create objects?

1.Using constructors /constructors pattern
  using functions - es 5 style
  using classes -  es 6 style
2.literal pattern


//constructor patterns
function Employee() {
    //instance variables
    this.id = 1
    this.name = 'Subramanian'
    //instance methods
    this.calculate = function () {
        return 100
    }
}
//
let emp = new Employee()
console.log(`id ${emp.id} Name ${emp.name} Salart ${emp.calculate()}`)


Constructor parameters:
//constructor parameters
function Employee(id = 1, name = 'Subramanian') {
    //instance variables
    this.id = id 
    this.name = name
    //instance methods
    this.calculate = function () {
        return 100
    }
}
//
let emp = new Employee(34,'Ram')
console.log(`id ${emp.id} Name ${emp.name} Salary ${emp.calculate()}`)

//how to declare es 6 class.

//constructor parameters
class Employee {
    constructor(id = 1, name = 'Subramanian') {
        //instance variables
        this.id = id
        this.name = name
    }
    //instance methods
    calculate() {
        return 100
    }
}
//
let emp = new Employee(34, 'Ram')
console.log(`id ${emp.id} Name ${emp.name} Salary ${emp.calculate()}`)
...................................................................................

Literal object:
..............
//ES 5/6 literal object 

const emp = {
    id: 1,
    name: 'subramanian',
    calculate: function () {
        return 100
    }
}
console.log(emp.id,emp.name,emp.calculate())
....................................................................................
			  Async Programming
...................................................................................

What is async programming?
 The application runtime which never blocks the current thread which is running the code.

 Any task related io,cup intensive operations are executed by a separate thread of exeution at kernal level.

Js supports async program by default...


Async programming implementations;

1.callback based implementation
2.Promises with then and catch
3.Promises with async await

Req:
1.OS should support async programming at low level
2.Application runtime like js engine should support async at low level
3.we need async apis in order to write 

Js async apis
1.timer
2.ajax 

sync api:


function start() {
    return 'start '
}
function end() {
    return 'end'
}
function sayHello() {
    return 'hello'
}
//sync style : every function has to be completed before moving to next function 
console.log(start())
console.log(sayHello())
console.log(end())


callback with timers:
.....................


function start() {
    return 'start '
}
function end() {
    return 'end'
}
function sayHello(callback) {
    //async api : timers
    setTimeout(callback, 5000, 'Delay')
}
//sync style : every function has to be completed before moving to next function 
console.log(start())
sayHello(function (message) {
    console.log(message)
})
console.log(end())
.....................................................................................
function start() {
    return 'start '
}
function end() {
    return 'end'
}
const sayHello = callback => {
    setTimeout(callback, 5000, 'Delay')
}
//sync style : every function has to be completed before moving to next function 
console.log(start())
sayHello(message => console.log(message))
console.log(end())
....................................................................................
				async composition/callback composition
.....................................................................................

The out put of one callback will be input to another callback - callback nesting.

//The output of one callback will be input to another callback

const getUser = (resolve, reject) => {
    let user = {
        id: 1,
        name: 'admin'
    }
    if (user) {
        setTimeout(resolve, 1000, user)
    } else {
        setTimeout(reject, 1000, { error: 'User not found' })
    }
}
const login = (user, resolve, reject) => {
    if (user.name === 'admin') {
        setTimeout(resolve, 1000, 'Login success')
    } else {
        setTimeout(reject, 1000, 'Login Failed')
    }
}
const dashboard = (status, resolve, reject) => {
    if (status === 'Login success') {
        setTimeout(resolve, 1000, 'Welcome to Admin')
    } else {
        setTimeout(reject, 1000, 'Welcome to Guest')
    }
}

function main() {
    //callback compostion
    getUser(user => {
        login(user,
            status => {
                dashboard(status, adminPage => {
                    console.log(adminPage)
                }, err => {
                    console.log(err)
                })
            }, err => {
                console.log(err)
            })
    }, err => {
        console.log(err)
    })

}
main()


    getUser(user => {
        login(user,
            status => {
                dashboard(status, adminPage => {
                    console.log(adminPage)
                }, err => {
                    console.log(err)
                })
            }, err => {
                console.log(err)
            })
    }, err => {
        console.log(err)
    })

In the above code, will you able 
to understand the code quickly, 
scalable
maintainable

if you say no
   "Callback Hell"

What is callback hell, the problem of writing complex callback based async program.
...................................................................................
				 Promises
....................................................................................

Promise is design pattern used to abstract complex callback based programs..

Since Promise is design pattern we need implementations

JQuery is the first framework who introduced promise design pattern and implmentation.

ES 6 Promises are netural language dependant object.

.....................................................................................
			  Promise Implementation
.....................................................................................

Features of Promise Object:
1.Promise by deafult is Async. Which implements timer api with 0 ms .
2.Promise can be used with any async callback based  implementations.


Objective:

 To remove callbacks in async/non blocking code. write cleaner async programming.
 To remove complex callback chaining code.


Difference between callbacks and promises:

Essentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function.

....................................................................................

		Promise Implemenation: Object Object creations
...................................................................................

1. Create Promise Object from Promise contructor
      new Promise()
2. Create Promise object from factory apis 
      Promise.resolve() / Promise.reject()

Promise object methods:

1.then - success
2.catch - errors
3.finally - clean up

factory api to create Promise object
4.resolve
5.reject
.......................................
6.all
7.race

1.Promise factory api
   -success - resolve
   -failure - reject


//basic promise implementation:
//In promises , you dont need to pass function as parameter

Promise with Success and also ensure that Promise is async.
//how write promise : factory api and constructor api 
//Promises are by default async 

function block(message) {
    console.log(message)
}
function delay() {
    return Promise.resolve('ok!')

}
block('start')
delay().then(res => console.log(res))
block('end')


promise error
//how write promise : factory api and constructor api 
//Promises are by default async 

function block(message) {
    console.log(message)
}
function delay() {
    return Promise.reject(new Error('something went wrong'))

}
block('start')
delay().catch(err => console.log(err))
block('end')
...............
Promise with success and failure

function block(message) {
    console.log(message)
}
function login(userName, passwrod) {
    if (userName === 'admin' && passwrod == 'admin') {
        return Promise.resolve('login success')
    } else {
        return Promise.reject('login failed')
    }
}
block('start')
login('admin', 'admin').then(res => console.log(res)).catch(err => console.log(err))
block('end')
...............................................................................

i want to return promise after 1ms ,

function block(message) {
    console.log(message)
}
function login(userName, passwrod) {
    if (userName === 'admin' && passwrod == 'admin') {
        return new Promise((resolve, reject) => {
            setTimeout(resolve, 5000, 'Login success')
        })
    } else {
        return new Promise((resolve, reject) => {
            setTimeout(reject, 5000, 'Login failed')
        })
    }
}
block('start')
login('admin', 'admin').then(res => console.log(res)).catch(err => console.log(err))
block('end')
....................................................................................
				Callback hell and promises
....................................................................................
//The output of one callback will be input to another callback

const getUser = () => {
    let user = {
        id: 1,
        name: 'admin'
    }
    return new Promise((resolve, reject) => {
        if (user) {
            setTimeout(resolve, 1000, user)
        } else {
            setTimeout(reject, 1000, { error: 'User not found' })
        }
    })
}


const login = user => {
    return new Promise((resolve, reject) => {
        if (user.name === 'admin') {
            setTimeout(resolve, 1000, 'Login success')
        } else {
            setTimeout(reject, 1000, 'Login Failed')
        }
    })
}
const dashboard = status => {
    return new Promise((resolve, reject) => {
        if (status === 'Login success') {
            setTimeout(resolve, 1000, 'Welcome to Admin')
        } else {
            setTimeout(reject, 1000, 'Welcome to Guest')
        }
    })
}

function main() {
    //callback compostion
    // getUser(user => {
    //     login(user,
    //         status => {
    //             dashboard(status, adminPage => {
    //                 console.log(adminPage)
    //             }, err => {
    //                 console.log(err)
    //             })
    //         }, err => {
    //             console.log(err)
    //         })
    // }, err => {
    //     console.log(err)
    // })

    getUser()
        .then(user => {
            return login(user)
        }).then(status => {
            return dashboard(status)
        })
        .then(page => {
            console.log(page)
        }).catch(err => console.log(err))
}
main()
...................................................................................
async..await
//The output of one callback will be input to another callback

const getUser = () => {
    let user = {
        id: 1,
        name: 'admin'
    }
    return new Promise((resolve, reject) => {
        if (user) {
            setTimeout(resolve, 1000, user)
        } else {
            setTimeout(reject, 1000, { error: 'User not found' })
        }
    })
}


const login = user => {
    return new Promise((resolve, reject) => {
        if (user.name === 'admin') {
            setTimeout(resolve, 1000, 'Login success')
        } else {
            setTimeout(reject, 1000, 'Login Failed')
        }
    })
}
const dashboard = status => {
    return new Promise((resolve, reject) => {
        if (status === 'Login success') {
            setTimeout(resolve, 1000, 'Welcome to Admin')
        } else {
            setTimeout(reject, 1000, 'Welcome to Guest')
        }
    })
}

async function main() {
    //callback compostion
    // getUser(user => {
    //     login(user,
    //         status => {
    //             dashboard(status, adminPage => {
    //                 console.log(adminPage)
    //             }, err => {
    //                 console.log(err)
    //             })
    //         }, err => {
    //             console.log(err)
    //         })
    // }, err => {
    //     console.log(err)
    // })

    // getUser()
    //     .then(user => {
    //         return login(user)
    //     }).then(status => {
    //         return dashboard(status)
    //     })
    //     .then(page => {
    //         console.log(page)
    //     }).catch(err => console.log(err))

    try {
        const user = await getUser()
        const status = await login(user)
        const page = await dashboard(status)
        console.log(user, status, page)
    }
    catch (err) {
        console.log(err)
    }
}
main()
.....................................................................................
				Commonjs



In java Modularity , is presented via "Packages"

Package organize the code  logically.

Customer.java

package com.ibm.cms

public class Customer{}

Java organizes code folders and files Physically.

d:/javaapps/src/
    com/ibm/cms/Customer.java

What about javascript Modularity?

 Javascript is file based modularity physically
 but logically there is no such modularity at language level.

collection of variable declarations and function.

Once js started growing in large scale, dev struck to organize code.

2000, Smart developers started thinking about how to modualrize js code.
 

Module design patterns came.

1.Namespace design pattern : 2000 : jquery
2.AMD -Async Module Defintion : dojo
---------------------------------------------------------
3.CJS - Common JS =  namespace + amd:2005 on wards
4.ES 6 Module design pattern:2012-2015  = amd + cjs
------------------------------------------------------------
5.System :2007 = AMD = CJS + ES 6
6.UMD :2008 = NAMESPACE + AMD + CJS = ES 6
....................................................................................
				Modualrity-Commonjs-CJS
.....................................................................................

How to share code? How to import code?

 Code:
  Could be variables,functions,classes.
  Variables can have any literal string,numbers,boolean,objects,functions...

src
  |
  subfolders
|
index.js

Sharing code :

Keywords
exports
module.exports

Imporing code:
require('fileName')
require('folderName/fileName')

exports:
 Used to share more code from the single file.
 exports packs the entire code into one single js object and returns that object


src/mylib.js
//code ; variables; functions

//exports
exports.name = 'Subramanian'
exports.city = 'coimbatore'
exports.id = 1
exports.status = true
exports.calculate = function () {
    return 1
}
exports.skills = ['javascript', 'java']

src/index.js
const info = require('./mylib')
console.log(info)


index.js:1 Uncaught ReferenceError: require is not defined
    at index.js:1:14
(anonymous) @ index.js:1.

because browser does not support commonjs directly.

How to run commonjs code?
 we need to use build system.

Using build tools:
.................
webpack

How to install webpack in our project?

Steps:

1.make sure that you have package.json file
 if not , create package.json file

npm init  --yes

2.install webpack
  npm install webpack webpack-cli --save-dev

3.add webpack.config.js in the project root dir

const path = require('path');

module.exports = {
  entry: './src/index.js',
  mode:'development',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  },
};

4.build /bundle your code
 open package.json
 add entry into scripts

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "compile": "tsc",
    "build": "webpack --watch"
  },

5.start bundling
  open cmd and run the following command
npm run build

> es6-apps@1.0.0 build
> webpack

asset bundle.js 5.19 KiB [emitted] (name: main)
runtime modules 670 bytes 3 modules
cacheable modules 758 bytes
  ./src/index.js 146 bytes [built] [code generated]
  ./src/mylib.js 612 bytes [built] [code generated]
webpack 5.70.0 compiled successfully in 113 ms

6.add bundle file inside index.html
     <script src="dist/bundle.js"></script>
..

src/index.js

const info = require('./mylib')
const CustomerService = require('./services/customer.service')

console.log(info)
console.log(info.name,info.status)
let customerService = new CustomerService()
console.log(customerService.findAll())
.....................................................................................
				NPM - node package manager
.....................................................................................

It is tool used to manage life cycle of any js project.

Every js project, must have one file called package.json

when you setup project, you have to create package.json file

npm init

{
  "name": "jsapps",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "webpack --watch"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "webpack": "^5.75.0",
    "webpack-cli": "^5.0.0"
  }
}

node_modules:
 -It is going to hold all dependencies for the project.

how to install packages?

How to install node packages which was distributed by others?

npm install [<package-name>]

You can find out the packages from npm registry server

npm install | i  lodash --options

npm i lodash 

No options are given by default "--save"

Options:

 --save
     for production + dev
 --save-dev
     -for only for dev 
 --production
    -for only production
  -g
    -for tool purpose -dev


Application mode

1.dev
2.test
3.prod

dev : any dependency required for development only
  --save-dev
test : 
   any dependency required for development only - test
   --save-dev
prod:
  dependency used in dev and production... 
  --save
"dependencies": {
    "lodash": "^4.17.21"
  }
....................................................................................
				How to create npm package

Steps:

1.create folder
>mkdir mynpm-apps
>cd mynpm-apps
>mkdir src

2.create package.json

Before create you have to ensure that npm has been installed.

npm init <initalizer>

npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help init` for definitive documentation on these fields
and exactly what they do.


package.json

{
  "name": "mynpmapps",
  "version": "1.0.0",
  "description": "This is demo package",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "my",
    "demo",
    "package"
  ],
  "author": "Subramanian Murugan",
  "license": "ISC"
}

name:
 This is used to publish package into registry

version:
   if you publish package into registry, which is differentiated by "version"

"1.0.0" - version no is based on the concept called "SEM Ver" concept- Semantic versioning.
 Major.minor.patch

main:
  It is main file used /entry file in the package , generally it would index.js or main.js

description:
  It explains the nature of packages- what is this packge.

Keywords:
  Used to discover your packages using npm search command

author:
  Who is author of this package

license:
  You should specify a license for your package so that people know how they are permitted to use it.
.................................................................................
			   node_modules
.................................................................................

  it is folder , used to install any node packages, the node programm always looks up the packages from the current folder.

....................................................................................
				Node Packages

How to install node packages which was distributed by others?

npm install [<package-name>]

You can find out the packages from npm registry server

npm install | i  lodash --options

npm i lodash 

No options are given by default "--save"

Options:

 --save
     for production + dev
 --save-dev
     -for only for dev 
 --production
    -for only production
  -g
    -for tool purpose -dev


Application mode

1.dev
2.test
3.prod

dev : any dependency required for development only
  --save-dev
test : 
   any dependency required for development only - test
   --save-dev
prod:
  dependency used in dev and production... 
  --save
"dependencies": {
    "lodash": "^4.17.21"
  }
..................................................................................
			 Test /Dev Only Dependency
.................................................................................

Libs required for dev and test
tools
   -compilers,webservers
   -testing libs and framworks 

eg:
  mocha - test runner is used for running test case
  chai.js -test assertion lib used for writing test cases
  jest -  test runner is used for running test cases

"devDependencies": {
    "chai": "^4.3.6"
  }
....................................................................................
				
....................................................................................
	  How to install only production dependencies during build process
....................................................................................
if you want to use app in production mode, you have exclude the dependencies.

npm i /npm install - install dev and production packages...
 --->it scans package.json file which install everything(dev + prod)

npm install --production
  it scans package.json which install only from  dev dependencies
.....................................................................................
.....................................................................................
....................................................................................
			How to remove /uninstall package

npm uninstall mocha --save-dev
,,,,,,,,,,,,,........................................................................
			Global Package
..................................................................................
         		

Global package is installed not inside project, installed globally.
Global packages are generally tools to create projects,webservers,test runtime like so.
npm install nodemon -g
npm install mocha -g
npm install create-react-app -g
etc...
....................................................................................
			 scripts
....................................................................................
 if you want to automat the js app workflows, scripts section is used.

scripts has ,script command and task to be executed.

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },

test - is command
"echo \"Error: no test specified\" && exit 1" - task to be executed

in npm we have many built in commands.
eg
 start
 stop
 publish
 test
 pack
 postinstall
 preinstall
etc..
https://docs.npmjs.com/cli/v8/using-npm/scripts#npm-rebuild

Use case :
 We can run node apps using scripts
 we can run webservers using scripts
 we can initalize the test env using scripts
 we can start containers using scripts
 etc...

how to execute scripts commands?

npm commandName
eg
npm start
npm test
npm pack
etc..

npm allows even custom commands

subu:"task"
build
deploy
compile

if you want to custom script command?

npm run commandName
npm run subu
npm run build
...............





































